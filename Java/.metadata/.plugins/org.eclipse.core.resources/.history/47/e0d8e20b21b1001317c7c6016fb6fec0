
/**
 * Indexes all images in a given file location 
 * Not yet sure what indexing a file means
 */
package desc;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import javax.imageio.ImageIO;

import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.FSDirectory;

import net.semanticmetadata.lire.DocumentBuilder;
import net.semanticmetadata.lire.DocumentBuilderFactory;
import net.semanticmetadata.lire.imageanalysis.CEDD;
import net.semanticmetadata.lire.utils.FileUtils;
import net.semanticmetadata.lire.utils.LuceneUtils;

public class ceddDiscriptor {
	
	private static String FileLocation; 
	private static File f;
	
	public ceddDiscriptor(String FileLoc){
		FileLocation = FileLoc;
		File f = new File(FileLocation);
	}

	public void IndexCedd(){
		
		System.out.println("Indexing images in " + FileLocation);
        
		//Might be able to get rid of 
		boolean passed = false;
//        if (f.exists() && f.isDirectory()){
//            passed = true;
//        }
		
        // Getting all images from a directory and its sub directories.
        ArrayList<String> imagePaths = null;
        try {
        	imagePaths = FileUtils.getAllImages(new File(FileLocation), true);
		} catch (IOException e) {
			System.err.println("Image files not found");
		}
        
        // Creating a CEDD document builder and indexing all files.
        DocumentBuilder builder = DocumentBuilderFactory.getCEDDDocumentBuilder();
        //Lucene IndexWriter
        IndexWriterConfig conf = new IndexWriterConfig(LuceneUtils.LUCENE_VERSION, 
        												new WhitespaceAnalyzer(LuceneUtils.LUCENE_VERSION));
        IndexWriter indexWriter = null;
        try {
        	indexWriter = new IndexWriter(FSDirectory.open(new File("index")), conf);
        	System.out.println("created index");
		} catch (IOException e) {
			System.err.println("Could not infex files");
		}
       
        // Iterating through images building the low level features
        for (Iterator<String> it = imagePaths.iterator(); it.hasNext(); ) {
            String imageFilePath = it.next();
            System.out.println("Indexing " + imageFilePath);
            try {
                BufferedImage img = ImageIO.read(new FileInputStream(imageFilePath));
                Document document = builder.createDocument(img, imageFilePath);
                indexWriter.addDocument(document);
            } catch (Exception e) {
                System.err.println("Error indexing images.");
            }
        }
        
        // closing the IndexWriter why, can we access it?

        try {
        	indexWriter.close();
		} catch (IOException e) {
			System.err.println("Error closing image indexer.");
		}
        System.out.println("Finished indexing.");
		
	}


}
